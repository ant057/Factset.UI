{"version":3,"sources":["core/rtl/dir.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;IAAA,qBAQO,eAAe,CAAC,CAAA;IAIvB;;;;;OAKG;IAMH;QAAA;YACwB,SAAI,GAAoB,KAAK,CAAC;YAE1C,cAAS,GAAG,IAAI,mBAAY,EAAQ,CAAC;QAgBjD,CAAC;QAbC,sBAAI,oBAAG;iBAAP;gBACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;YACnB,CAAC;iBACD,UAAQ,CAAkB;gBACxB,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;gBACpB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;gBACd,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oBACrB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC5B,CAAC;YACH,CAAC;;;WAPA;QASD,sBAAI,sBAAK;iBAAT,cAA+B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;iBACjD,UAAU,CAAkB,IAAI,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;;;WADE;QAhBjD;YAAC,YAAK,CAAC,KAAK,CAAC;;yCAAA;QAEb;YAAC,aAAM,EAAE;;8CAAA;QAET;YAAC,kBAAW,CAAC,UAAU,CAAC;;sCAAA;QAV1B;YAAC,gBAAS,CAAC;gBACT,QAAQ,EAAE,OAAO;gBACjB,iGAAiG;gBACjG,QAAQ,EAAE,WAAW;aACtB,CAAC;;eAAA;QAoBF,UAAC;IAAD,CAnBA,AAmBC,IAAA;IAnBY,WAAG,MAmBf,CAAA;IAOD;QAAA;QAOA,CAAC;QANQ,iBAAO,GAAd;YACE,MAAM,CAAC;gBACL,QAAQ,EAAE,SAAS;gBACnB,SAAS,EAAE,EAAE;aACd,CAAC;QACJ,CAAC;QAVH;YAAC,eAAQ,CAAC;gBACR,OAAO,EAAE,CAAC,GAAG,CAAC;gBACd,YAAY,EAAE,CAAC,GAAG,CAAC;aACpB,CAAC;;qBAAA;QAQF,gBAAC;IAAD,CAPA,AAOC,IAAA;IAPY,iBAAS,YAOrB,CAAA","file":"core/rtl/dir.js","sourcesContent":["import {\n    NgModule,\n    ModuleWithProviders,\n    Directive,\n    HostBinding,\n    Output,\n    Input,\n    EventEmitter\n} from '@angular/core';\n\nexport type LayoutDirection = 'ltr' | 'rtl';\n\n/**\n * Directive to listen to changes of direction of part of the DOM.\n *\n * Applications should use this directive instead of the native attribute so that Material\n * components can listen on changes of direction.\n */\n@Directive({\n  selector: '[dir]',\n  // TODO(hansl): maybe `$implicit` isn't the best option here, but for now that's the best we got.\n  exportAs: '$implicit'\n})\nexport class Dir {\n  @Input('dir') private _dir: LayoutDirection = 'ltr';\n\n  @Output() dirChange = new EventEmitter<void>();\n\n  @HostBinding('attr.dir')\n  get dir(): LayoutDirection {\n    return this._dir;\n  }\n  set dir(v: LayoutDirection) {\n    let old = this._dir;\n    this._dir = v;\n    if (old != this._dir) {\n      this.dirChange.emit(null);\n    }\n  }\n\n  get value(): LayoutDirection { return this.dir; }\n  set value(v: LayoutDirection) { this.dir = v; }\n}\n\n\n@NgModule({\n  exports: [Dir],\n  declarations: [Dir]\n})\nexport class RtlModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: RtlModule,\n      providers: []\n    };\n  }\n}\n"],"sourceRoot":"/source/"}