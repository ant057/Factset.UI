{"version":3,"sources":["core/a11y/live-announcer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAAA,qBAKO,eAAe,CAAC,CAAA;IAEV,oCAA4B,GAAI,IAAI,kBAAW,CAAC,wBAAwB,CAAC,CAAC;IAKvF;QAIE,yBAA8D,YAAiB;YAE7E,yFAAyF;YACzF,4FAA4F;YAC5F,iEAAiE;YACjE,IAAI,CAAC,YAAY,GAAG,YAAY,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAChE,CAAC;QAED;;;WAGG;QACH,kCAAQ,GAAR,UAAS,OAAe,EAAE,UAAyC;YAAnE,iBAYC;YAZyB,0BAAyC,GAAzC,qBAAyC;YACjE,IAAI,CAAC,YAAY,CAAC,WAAW,GAAG,EAAE,CAAC;YAEnC,6EAA6E;YAC7E,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAExD,iFAAiF;YACjF,wFAAwF;YACxF,2FAA2F;YAC3F,kEAAkE;YAClE,2CAA2C;YAC3C,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,YAAY,CAAC,WAAW,GAAG,OAAO,EAAvC,CAAuC,EAAE,GAAG,CAAC,CAAC;QACjE,CAAC;QAEO,4CAAkB,GAA1B;YACE,IAAI,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAE3C,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;YAC1C,MAAM,CAAC,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;YAC3C,MAAM,CAAC,YAAY,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;YAE3C,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAElC,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC;QAzCH;YAAC,iBAAU,EAAE;uBAKE,eAAQ,EAAE;uBAAE,aAAM,CAAC,oCAA4B,CAAC;;2BALlD;QA2Cb,sBAAC;IAAD,CA1CA,AA0CC,IAAA;IA1CY,uBAAe,kBA0C3B,CAAA","file":"core/a11y/live-announcer.js","sourcesContent":["import {\n  Injectable,\n  OpaqueToken,\n  Optional,\n  Inject\n} from '@angular/core';\n\nexport const LIVE_ANNOUNCER_ELEMENT_TOKEN  = new OpaqueToken('mdLiveAnnouncerElement');\n\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\n\n@Injectable()\nexport class MdLiveAnnouncer {\n\n  private _liveElement: Element;\n\n  constructor(@Optional() @Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN) elementToken: any) {\n\n    // We inject the live element as `any` because the constructor signature cannot reference\n    // browser globals (HTMLElement) on non-browser environments, since having a class decorator\n    // causes TypeScript to preserve the constructor signature types.\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n\n  /**\n   * @param message Message to be announced to the screenreader\n   * @param politeness The politeness of the announcer element.\n   */\n  announce(message: string, politeness: AriaLivePoliteness = 'polite'): void {\n    this._liveElement.textContent = '';\n\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    setTimeout(() => this._liveElement.textContent = message, 100);\n  }\n\n  private _createLiveElement(): Element {\n    let liveEl = document.createElement('div');\n\n    liveEl.classList.add('md-live-announcer');\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n\n    document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\n}\n"],"sourceRoot":"/source/"}