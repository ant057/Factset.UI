{"version":3,"sources":["core/overlay/overlay-container.ts"],"names":[],"mappings":";;;;;;;;;IAAA;;;OAGG;IACH;QAAA;QAwBA,CAAC;QArBC;;;;;WAKG;QACH,8CAAmB,GAAnB;YACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAAC,CAAC;YACzD,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;QAChC,CAAC;QAED;;;WAGG;QACK,2CAAgB,GAAxB;YACE,IAAI,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC9C,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YAChD,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YACrC,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;QACrC,CAAC;QACH,uBAAC;IAAD,CAxBA,AAwBC,IAAA;IAxBY,wBAAgB,mBAwB5B,CAAA","file":"core/overlay/overlay-container.js","sourcesContent":["/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nexport class OverlayContainer {\n  private _containerElement: HTMLElement;\n\n  /**\n   * This method returns the overlay container element.  It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns {HTMLElement} the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'md-overlay-container' class on the document body.\n   */\n  private _createContainer(): void {\n    let container = document.createElement('div');\n    container.classList.add('md-overlay-container');\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n"],"sourceRoot":"/source/"}